# set mem 0 to the amount of fibonacci numbers to print, minus 2
# 12 numbers in this case, so set to 10
+++++ 5
+++++ 10

# set mem 2 and mem 3 to 1
# preserve mem 1 as 0 so that we can use a loop to get the pointer back to mem 1
# the fibonacci sequence will be computed from mem 2 and onwards
# we can assume the memory slot after the sequence computed so far is 0
>>+>+<<<

# as long as mem 0 is not 0
[      
    >>[>]<  # goto last computed fibonacci number

    # tape is M N 0 0 here, and M and N are the last two fibonacci numbers computed
    # these four slots will be called M N R I in order, and the pointer is at N
    
    ^;^ N>R>I ;              # copy N to I

    I<R<N<M ^;^ M>N>R ; R>I  # copy M to R

    # add I to R
    [
        I<R +
        R>I -
    ]

    # I is 0 now

    <[<]<- # return to mem 0 and decrement
]

# Store mem 0 (which is 0) in AReg, then increment to 32 (whitespace)
^;++++++++++++++++++++++++++++++++^ 

# Print the entire sequence
>>[!>^.^]